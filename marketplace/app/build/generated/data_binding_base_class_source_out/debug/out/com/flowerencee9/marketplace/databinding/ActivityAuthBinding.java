// Generated by view binder compiler. Do not edit!
package com.flowerencee9.marketplace.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.LinearLayout;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.flowerencee9.marketplace.R;
import com.flowerencee9.marketplace.support.customui.CustomToolbar;
import com.flowerencee9.marketplace.support.customui.InputView;
import com.google.android.material.button.MaterialButtonToggleGroup;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityAuthBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final Button btnAction;

  @NonNull
  public final Button btnCustomer;

  @NonNull
  public final Button btnSeller;

  @NonNull
  public final LinearLayout containerMerchant;

  @NonNull
  public final LinearLayout containerPassword;

  @NonNull
  public final LinearLayout containerProfile;

  @NonNull
  public final InputView inputAddress;

  @NonNull
  public final InputView inputConfirm;

  @NonNull
  public final InputView inputDOB;

  @NonNull
  public final InputView inputEmail;

  @NonNull
  public final InputView inputImage;

  @NonNull
  public final InputView inputName;

  @NonNull
  public final InputView inputPassword;

  @NonNull
  public final InputView inputPhone;

  @NonNull
  public final InputView merchantAddress;

  @NonNull
  public final InputView merchantName;

  @NonNull
  public final MaterialButtonToggleGroup selectorType;

  @NonNull
  public final CustomToolbar tbToolbar;

  private ActivityAuthBinding(@NonNull ConstraintLayout rootView, @NonNull Button btnAction,
      @NonNull Button btnCustomer, @NonNull Button btnSeller,
      @NonNull LinearLayout containerMerchant, @NonNull LinearLayout containerPassword,
      @NonNull LinearLayout containerProfile, @NonNull InputView inputAddress,
      @NonNull InputView inputConfirm, @NonNull InputView inputDOB, @NonNull InputView inputEmail,
      @NonNull InputView inputImage, @NonNull InputView inputName, @NonNull InputView inputPassword,
      @NonNull InputView inputPhone, @NonNull InputView merchantAddress,
      @NonNull InputView merchantName, @NonNull MaterialButtonToggleGroup selectorType,
      @NonNull CustomToolbar tbToolbar) {
    this.rootView = rootView;
    this.btnAction = btnAction;
    this.btnCustomer = btnCustomer;
    this.btnSeller = btnSeller;
    this.containerMerchant = containerMerchant;
    this.containerPassword = containerPassword;
    this.containerProfile = containerProfile;
    this.inputAddress = inputAddress;
    this.inputConfirm = inputConfirm;
    this.inputDOB = inputDOB;
    this.inputEmail = inputEmail;
    this.inputImage = inputImage;
    this.inputName = inputName;
    this.inputPassword = inputPassword;
    this.inputPhone = inputPhone;
    this.merchantAddress = merchantAddress;
    this.merchantName = merchantName;
    this.selectorType = selectorType;
    this.tbToolbar = tbToolbar;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityAuthBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityAuthBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_auth, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityAuthBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.btnAction;
      Button btnAction = ViewBindings.findChildViewById(rootView, id);
      if (btnAction == null) {
        break missingId;
      }

      id = R.id.btnCustomer;
      Button btnCustomer = ViewBindings.findChildViewById(rootView, id);
      if (btnCustomer == null) {
        break missingId;
      }

      id = R.id.btnSeller;
      Button btnSeller = ViewBindings.findChildViewById(rootView, id);
      if (btnSeller == null) {
        break missingId;
      }

      id = R.id.containerMerchant;
      LinearLayout containerMerchant = ViewBindings.findChildViewById(rootView, id);
      if (containerMerchant == null) {
        break missingId;
      }

      id = R.id.containerPassword;
      LinearLayout containerPassword = ViewBindings.findChildViewById(rootView, id);
      if (containerPassword == null) {
        break missingId;
      }

      id = R.id.containerProfile;
      LinearLayout containerProfile = ViewBindings.findChildViewById(rootView, id);
      if (containerProfile == null) {
        break missingId;
      }

      id = R.id.inputAddress;
      InputView inputAddress = ViewBindings.findChildViewById(rootView, id);
      if (inputAddress == null) {
        break missingId;
      }

      id = R.id.inputConfirm;
      InputView inputConfirm = ViewBindings.findChildViewById(rootView, id);
      if (inputConfirm == null) {
        break missingId;
      }

      id = R.id.inputDOB;
      InputView inputDOB = ViewBindings.findChildViewById(rootView, id);
      if (inputDOB == null) {
        break missingId;
      }

      id = R.id.inputEmail;
      InputView inputEmail = ViewBindings.findChildViewById(rootView, id);
      if (inputEmail == null) {
        break missingId;
      }

      id = R.id.inputImage;
      InputView inputImage = ViewBindings.findChildViewById(rootView, id);
      if (inputImage == null) {
        break missingId;
      }

      id = R.id.inputName;
      InputView inputName = ViewBindings.findChildViewById(rootView, id);
      if (inputName == null) {
        break missingId;
      }

      id = R.id.inputPassword;
      InputView inputPassword = ViewBindings.findChildViewById(rootView, id);
      if (inputPassword == null) {
        break missingId;
      }

      id = R.id.inputPhone;
      InputView inputPhone = ViewBindings.findChildViewById(rootView, id);
      if (inputPhone == null) {
        break missingId;
      }

      id = R.id.merchantAddress;
      InputView merchantAddress = ViewBindings.findChildViewById(rootView, id);
      if (merchantAddress == null) {
        break missingId;
      }

      id = R.id.merchantName;
      InputView merchantName = ViewBindings.findChildViewById(rootView, id);
      if (merchantName == null) {
        break missingId;
      }

      id = R.id.selectorType;
      MaterialButtonToggleGroup selectorType = ViewBindings.findChildViewById(rootView, id);
      if (selectorType == null) {
        break missingId;
      }

      id = R.id.tbToolbar;
      CustomToolbar tbToolbar = ViewBindings.findChildViewById(rootView, id);
      if (tbToolbar == null) {
        break missingId;
      }

      return new ActivityAuthBinding((ConstraintLayout) rootView, btnAction, btnCustomer, btnSeller,
          containerMerchant, containerPassword, containerProfile, inputAddress, inputConfirm,
          inputDOB, inputEmail, inputImage, inputName, inputPassword, inputPhone, merchantAddress,
          merchantName, selectorType, tbToolbar);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
