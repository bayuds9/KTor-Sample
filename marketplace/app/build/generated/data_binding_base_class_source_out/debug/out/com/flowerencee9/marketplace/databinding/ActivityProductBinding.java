// Generated by view binder compiler. Do not edit!
package com.flowerencee9.marketplace.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ImageButton;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.cardview.widget.CardView;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.flowerencee9.marketplace.R;
import com.flowerencee9.marketplace.support.customui.CustomToolbar;
import com.flowerencee9.marketplace.support.customui.InputView;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityProductBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final TextView amountLable;

  @NonNull
  public final Button btnAction;

  @NonNull
  public final ImageButton btnCart;

  @NonNull
  public final ImageButton btnMin;

  @NonNull
  public final ImageButton btnPlus;

  @NonNull
  public final CardView cardInfo;

  @NonNull
  public final ConstraintLayout containerAmount;

  @NonNull
  public final ConstraintLayout containerCustomer;

  @NonNull
  public final LinearLayout containerSeller;

  @NonNull
  public final CardView containerStore;

  @NonNull
  public final ImageView imgProduct;

  @NonNull
  public final EditText inputAmount;

  @NonNull
  public final InputView inputDesc;

  @NonNull
  public final InputView inputName;

  @NonNull
  public final InputView inputPrice;

  @NonNull
  public final InputView inputStock;

  @NonNull
  public final InputView inputWeight;

  @NonNull
  public final ImageView productImage;

  @NonNull
  public final RecyclerView rvProductInfo;

  @NonNull
  public final RecyclerView rvReview;

  @NonNull
  public final View separator;

  @NonNull
  public final CustomToolbar tbToolbar;

  @NonNull
  public final TextView tvPrice;

  @NonNull
  public final TextView tvProductName;

  @NonNull
  public final TextView tvReview;

  @NonNull
  public final TextView tvSellerName;

  @NonNull
  public final TextView tvWeight;

  private ActivityProductBinding(@NonNull ConstraintLayout rootView, @NonNull TextView amountLable,
      @NonNull Button btnAction, @NonNull ImageButton btnCart, @NonNull ImageButton btnMin,
      @NonNull ImageButton btnPlus, @NonNull CardView cardInfo,
      @NonNull ConstraintLayout containerAmount, @NonNull ConstraintLayout containerCustomer,
      @NonNull LinearLayout containerSeller, @NonNull CardView containerStore,
      @NonNull ImageView imgProduct, @NonNull EditText inputAmount, @NonNull InputView inputDesc,
      @NonNull InputView inputName, @NonNull InputView inputPrice, @NonNull InputView inputStock,
      @NonNull InputView inputWeight, @NonNull ImageView productImage,
      @NonNull RecyclerView rvProductInfo, @NonNull RecyclerView rvReview, @NonNull View separator,
      @NonNull CustomToolbar tbToolbar, @NonNull TextView tvPrice, @NonNull TextView tvProductName,
      @NonNull TextView tvReview, @NonNull TextView tvSellerName, @NonNull TextView tvWeight) {
    this.rootView = rootView;
    this.amountLable = amountLable;
    this.btnAction = btnAction;
    this.btnCart = btnCart;
    this.btnMin = btnMin;
    this.btnPlus = btnPlus;
    this.cardInfo = cardInfo;
    this.containerAmount = containerAmount;
    this.containerCustomer = containerCustomer;
    this.containerSeller = containerSeller;
    this.containerStore = containerStore;
    this.imgProduct = imgProduct;
    this.inputAmount = inputAmount;
    this.inputDesc = inputDesc;
    this.inputName = inputName;
    this.inputPrice = inputPrice;
    this.inputStock = inputStock;
    this.inputWeight = inputWeight;
    this.productImage = productImage;
    this.rvProductInfo = rvProductInfo;
    this.rvReview = rvReview;
    this.separator = separator;
    this.tbToolbar = tbToolbar;
    this.tvPrice = tvPrice;
    this.tvProductName = tvProductName;
    this.tvReview = tvReview;
    this.tvSellerName = tvSellerName;
    this.tvWeight = tvWeight;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityProductBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityProductBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_product, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityProductBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.amountLable;
      TextView amountLable = ViewBindings.findChildViewById(rootView, id);
      if (amountLable == null) {
        break missingId;
      }

      id = R.id.btnAction;
      Button btnAction = ViewBindings.findChildViewById(rootView, id);
      if (btnAction == null) {
        break missingId;
      }

      id = R.id.btnCart;
      ImageButton btnCart = ViewBindings.findChildViewById(rootView, id);
      if (btnCart == null) {
        break missingId;
      }

      id = R.id.btnMin;
      ImageButton btnMin = ViewBindings.findChildViewById(rootView, id);
      if (btnMin == null) {
        break missingId;
      }

      id = R.id.btnPlus;
      ImageButton btnPlus = ViewBindings.findChildViewById(rootView, id);
      if (btnPlus == null) {
        break missingId;
      }

      id = R.id.cardInfo;
      CardView cardInfo = ViewBindings.findChildViewById(rootView, id);
      if (cardInfo == null) {
        break missingId;
      }

      id = R.id.containerAmount;
      ConstraintLayout containerAmount = ViewBindings.findChildViewById(rootView, id);
      if (containerAmount == null) {
        break missingId;
      }

      id = R.id.containerCustomer;
      ConstraintLayout containerCustomer = ViewBindings.findChildViewById(rootView, id);
      if (containerCustomer == null) {
        break missingId;
      }

      id = R.id.containerSeller;
      LinearLayout containerSeller = ViewBindings.findChildViewById(rootView, id);
      if (containerSeller == null) {
        break missingId;
      }

      id = R.id.containerStore;
      CardView containerStore = ViewBindings.findChildViewById(rootView, id);
      if (containerStore == null) {
        break missingId;
      }

      id = R.id.imgProduct;
      ImageView imgProduct = ViewBindings.findChildViewById(rootView, id);
      if (imgProduct == null) {
        break missingId;
      }

      id = R.id.inputAmount;
      EditText inputAmount = ViewBindings.findChildViewById(rootView, id);
      if (inputAmount == null) {
        break missingId;
      }

      id = R.id.inputDesc;
      InputView inputDesc = ViewBindings.findChildViewById(rootView, id);
      if (inputDesc == null) {
        break missingId;
      }

      id = R.id.inputName;
      InputView inputName = ViewBindings.findChildViewById(rootView, id);
      if (inputName == null) {
        break missingId;
      }

      id = R.id.inputPrice;
      InputView inputPrice = ViewBindings.findChildViewById(rootView, id);
      if (inputPrice == null) {
        break missingId;
      }

      id = R.id.inputStock;
      InputView inputStock = ViewBindings.findChildViewById(rootView, id);
      if (inputStock == null) {
        break missingId;
      }

      id = R.id.inputWeight;
      InputView inputWeight = ViewBindings.findChildViewById(rootView, id);
      if (inputWeight == null) {
        break missingId;
      }

      id = R.id.productImage;
      ImageView productImage = ViewBindings.findChildViewById(rootView, id);
      if (productImage == null) {
        break missingId;
      }

      id = R.id.rvProductInfo;
      RecyclerView rvProductInfo = ViewBindings.findChildViewById(rootView, id);
      if (rvProductInfo == null) {
        break missingId;
      }

      id = R.id.rvReview;
      RecyclerView rvReview = ViewBindings.findChildViewById(rootView, id);
      if (rvReview == null) {
        break missingId;
      }

      id = R.id.separator;
      View separator = ViewBindings.findChildViewById(rootView, id);
      if (separator == null) {
        break missingId;
      }

      id = R.id.tbToolbar;
      CustomToolbar tbToolbar = ViewBindings.findChildViewById(rootView, id);
      if (tbToolbar == null) {
        break missingId;
      }

      id = R.id.tvPrice;
      TextView tvPrice = ViewBindings.findChildViewById(rootView, id);
      if (tvPrice == null) {
        break missingId;
      }

      id = R.id.tvProductName;
      TextView tvProductName = ViewBindings.findChildViewById(rootView, id);
      if (tvProductName == null) {
        break missingId;
      }

      id = R.id.tvReview;
      TextView tvReview = ViewBindings.findChildViewById(rootView, id);
      if (tvReview == null) {
        break missingId;
      }

      id = R.id.tvSellerName;
      TextView tvSellerName = ViewBindings.findChildViewById(rootView, id);
      if (tvSellerName == null) {
        break missingId;
      }

      id = R.id.tvWeight;
      TextView tvWeight = ViewBindings.findChildViewById(rootView, id);
      if (tvWeight == null) {
        break missingId;
      }

      return new ActivityProductBinding((ConstraintLayout) rootView, amountLable, btnAction,
          btnCart, btnMin, btnPlus, cardInfo, containerAmount, containerCustomer, containerSeller,
          containerStore, imgProduct, inputAmount, inputDesc, inputName, inputPrice, inputStock,
          inputWeight, productImage, rvProductInfo, rvReview, separator, tbToolbar, tvPrice,
          tvProductName, tvReview, tvSellerName, tvWeight);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
