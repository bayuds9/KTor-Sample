// Generated by view binder compiler. Do not edit!
package com.flowerencee9.marketplace.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.EditText;
import android.widget.ImageButton;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.recyclerview.widget.RecyclerView;
import androidx.swiperefreshlayout.widget.SwipeRefreshLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.flowerencee9.marketplace.R;
import com.flowerencee9.marketplace.support.customui.CustomToolbar;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityMessagesBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final ImageButton btnSend;

  @NonNull
  public final ConstraintLayout containerMessage;

  @NonNull
  public final LayoutHaventLoginBinding emptyView;

  @NonNull
  public final EditText etMessage;

  @NonNull
  public final RecyclerView rvMessage;

  @NonNull
  public final SwipeRefreshLayout swipeMessage;

  @NonNull
  public final CustomToolbar tbToolbar;

  private ActivityMessagesBinding(@NonNull ConstraintLayout rootView, @NonNull ImageButton btnSend,
      @NonNull ConstraintLayout containerMessage, @NonNull LayoutHaventLoginBinding emptyView,
      @NonNull EditText etMessage, @NonNull RecyclerView rvMessage,
      @NonNull SwipeRefreshLayout swipeMessage, @NonNull CustomToolbar tbToolbar) {
    this.rootView = rootView;
    this.btnSend = btnSend;
    this.containerMessage = containerMessage;
    this.emptyView = emptyView;
    this.etMessage = etMessage;
    this.rvMessage = rvMessage;
    this.swipeMessage = swipeMessage;
    this.tbToolbar = tbToolbar;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityMessagesBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityMessagesBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_messages, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityMessagesBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.btnSend;
      ImageButton btnSend = ViewBindings.findChildViewById(rootView, id);
      if (btnSend == null) {
        break missingId;
      }

      id = R.id.containerMessage;
      ConstraintLayout containerMessage = ViewBindings.findChildViewById(rootView, id);
      if (containerMessage == null) {
        break missingId;
      }

      id = R.id.emptyView;
      View emptyView = ViewBindings.findChildViewById(rootView, id);
      if (emptyView == null) {
        break missingId;
      }
      LayoutHaventLoginBinding binding_emptyView = LayoutHaventLoginBinding.bind(emptyView);

      id = R.id.etMessage;
      EditText etMessage = ViewBindings.findChildViewById(rootView, id);
      if (etMessage == null) {
        break missingId;
      }

      id = R.id.rvMessage;
      RecyclerView rvMessage = ViewBindings.findChildViewById(rootView, id);
      if (rvMessage == null) {
        break missingId;
      }

      id = R.id.swipeMessage;
      SwipeRefreshLayout swipeMessage = ViewBindings.findChildViewById(rootView, id);
      if (swipeMessage == null) {
        break missingId;
      }

      id = R.id.tbToolbar;
      CustomToolbar tbToolbar = ViewBindings.findChildViewById(rootView, id);
      if (tbToolbar == null) {
        break missingId;
      }

      return new ActivityMessagesBinding((ConstraintLayout) rootView, btnSend, containerMessage,
          binding_emptyView, etMessage, rvMessage, swipeMessage, tbToolbar);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
